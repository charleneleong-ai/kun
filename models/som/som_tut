{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"som_tut","version":"0.3.2","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"FwLfnrzIw34C","colab_type":"text"},"source":["Self Organising Maps Tutorial http://blog.yhat.com/posts/self-organizing-maps-2.html"]},{"cell_type":"code","metadata":{"id":"n7K9ZPWbQrdF","colab_type":"code","outputId":"6d84bed9-d6a6-41c0-a02a-a8863c8420c0","executionInfo":{"status":"ok","timestamp":1568287184508,"user_tz":-720,"elapsed":2390,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import warnings\n","warnings.filterwarnings('ignore')\n","import sys\n","import os\n","\n","# Mount Drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","PATH = os.path.abspath(os.path.join('drive', 'My Drive', 'engr489-2019', 'kun', 'models'))\n","sys.path.append(PATH)\n","\n","# OUTPUT_DIR = PATH+'/ae_hdbscan_v1_2019.04.09-11:54:40_output'\n","# print(OUTPUT_DIR)\n"],"execution_count":67,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dl9tESu0w8oC","colab_type":"text"},"source":["### Dataset\n","Dataset of 100 random RGB values - 100 3D vectors from 0-255."]},{"cell_type":"code","metadata":{"id":"bCPL9Gmv0tdZ","colab_type":"code","outputId":"3540176d-bc96-4608-d489-8d5906269c17","executionInfo":{"status":"ok","timestamp":1568287559005,"user_tz":-720,"elapsed":654,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import numpy as np\n","\n","raw_data = np.random.randint(0, 255, (2000, 3))\n","\n","raw_data.shape"],"execution_count":68,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2000, 3)"]},"metadata":{"tags":[]},"execution_count":68}]},{"cell_type":"markdown","metadata":{"id":"PSC13583xEfV","colab_type":"text"},"source":["### Objective\n","Taking 3D colour vectors and mapping them to 2D surface so similar colours will end up in same area of 2D surface.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"VMXwGUn0zaPs","colab_type":"text"},"source":["### SOM Parameters\n","- SOM Size: Dimensionality (2D) and number of neurons in the grid. This is decided through trial and error. We should use fewer neurons than datapts there may be no overlap. Each of the 2D pts represents a 3D weight vector associates with the same number of dimensions as input. eg. 3D weight vector for 3 dim input\n","\n","- Learning Parameters:\n","    - Number of iterations: for small example, 2000 suffices, big examples >10 000\n","    - Radius decay: the initial 2D radius will encompass most of the SOM and will gradually decrease as the number of iterations increases.\n","    - Learning rate: decides how much we apply changes to SOM at each iter\n","    - Learning rate decay: how much the lr should decay over time"]},{"cell_type":"code","metadata":{"id":"4V51LofUWu2d","colab_type":"code","outputId":"ae45ecbe-efdf-41a1-fe34-6ff407044ea9","executionInfo":{"status":"ok","timestamp":1568287560845,"user_tz":-720,"elapsed":815,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["network_dimensions = np.array([20, 10])\n","n_iterations = 2000\n","init_learning_rate = 0.01\n","# establish size variables based on data\n","\n","n = raw_data.shape[0]\n","m = raw_data.shape[1]\n","print(n, m)\n","\n","# weight matrix (i.e. the SOM) needs to be one m-dimensional vector for each neuron in the SOM\n","# setup random weights between 0 and 1\n","net = np.random.random((network_dimensions[0], network_dimensions[1], m))\n","print(net.shape)\n","\n","# initial neighbourhood radius\n","init_radius = max(network_dimensions[0], network_dimensions[1]) / 2\n","# radius decay parameter\n","time_constant = n_iterations / np.log(init_radius)"],"execution_count":69,"outputs":[{"output_type":"stream","text":["2000 3\n","(20, 10, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oniIt_NqGXv9","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ijc9zesgzJjF","colab_type":"text"},"source":["### Normalisation\n","\n"]},{"cell_type":"code","metadata":{"id":"UeP2hK8NzJGK","colab_type":"code","colab":{}},"source":["# we want to keep a copy of the raw data for later\n","data = raw_data\n","\n","# normalise\n","data = raw_data / data.max()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sN7xMsAizocH","colab_type":"text"},"source":["### Learning\n","\n","For a single iteration:\n","\n","- Find the neuron in the SOM whose associated 3D vector is closest to our chosen 3D colour vector. At each step, this is called the Best Matching Unit (BMU)\n","- Move the BMUâ€™s 3D weight vector closer to the input vector in 3D space\n","- Identify the 2D neighbours of the BMU and also move their 3D weight vectors closer to the input vector, although by a smaller amount\n","- Update the learning rate (reduce it at each iteration)"]},{"cell_type":"code","metadata":{"id":"518VKjDgz-qN","colab_type":"code","colab":{}},"source":["def find_bmu(t, net, m):\n","    \"\"\"\n","        Find the best matching unit for a given vector, t, in the SOM\n","        Returns: a (bmu, bmu_idx) tuple where bmu is the high-dimensional BMU\n","                 and bmu_idx is the index of this vector in the SOM\n","    \"\"\"\n","    bmu_idx = np.array([0, 0])\n","    # set the initial minimum distance to a huge number\n","    min_dist = np.iinfo(np.int).max\n","    # calculate the high-dimensional distance between each neuron and the input\n","    for x in range(net.shape[0]):\n","        for y in range(net.shape[1]):\n","            w = net[x, y, :].reshape(m, 1)\n","            # don't bother with actual Euclidean distance, to avoid expensive sqrt operation\n","            sq_dist = np.sum((w - t) ** 2)\n","            if sq_dist < min_dist:\n","                min_dist = sq_dist\n","                bmu_idx = np.array([x, y])\n","    # get vector corresponding to bmu_idx\n","    bmu = net[bmu_idx[0], bmu_idx[1], :].reshape(m, 1)\n","    # return the (bmu, bmu_idx) tuple\n","    return (bmu, bmu_idx)\n","\n","def decay_radius(initial_radius, i, time_constant):\n","    return initial_radius * np.exp(-i / time_constant)\n","\n","def decay_learning_rate(initial_learning_rate, i, n_iterations):\n","    return initial_learning_rate * np.exp(-i / n_iterations)\n","\n","def calculate_influence(distance, radius):\n","    return np.exp(-distance / (2* (radius**2)))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dd8fHqI804Hg","colab_type":"code","colab":{}},"source":["for i in range(n_iterations):\n","  \n","#     print('Iteration %d' % i)\n","    \n","    # select a training example at random\n","    t = data[np.random.randint(0, n), :].reshape(np.array([m, 1]))\n","    \n","    # find its Best Matching Unit\n","    bmu, bmu_idx = find_bmu(t, net, m)\n","    \n","    # decay the SOM parameters\n","    r = decay_radius(init_radius, i, time_constant)\n","    l = decay_learning_rate(init_learning_rate, i, n_iterations)\n","    \n","    # update weight vector to move closer to input\n","    # and move its neighbours in 2-D vector space closer\n","    # by a factor proportional to their 2-D distance from the BMU\n","    for x in range(net.shape[0]):\n","        for y in range(net.shape[1]):\n","            w = net[x, y, :].reshape(m, 1)\n","            # get the 2-D distance (again, not the actual Euclidean distance)\n","            w_dist = np.sum((np.array([x, y]) - bmu_idx) ** 2)\n","            \n","            # w_dist = np.sqrt(w_dist)\n","            \n","            if w_dist <= r**2:\n","                # calculate the degree of influence (based on the 2-D distance)\n","                influence = calculate_influence(w_dist, r)\n","                \n","                # new w = old w + (learning rate * influence * delta)\n","                # where delta = input vector (t) - old w\n","                new_w = w + (l * influence * (t - w))\n","                net[x, y, :] = new_w.reshape(1, 3)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KodWLEg2OT5y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"865ba2c0-f724-48ec-9a5e-5700dbc3fb7f","executionInfo":{"status":"ok","timestamp":1568288516764,"user_tz":-720,"elapsed":664,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}}},"source":["# centroids = np.zeros(shape=(1, net.shape[2]))\n","# print(centroids.shape)\n","# for x in range(1, net.shape[0] + 1):\n","#         for y in range(1, net.shape[1] + 1):\n","#             print(net[x-1, y-1, :].shape)\n","#             centroids = np.concatenate(centroids, np.array(net[x-1, y-1, :]))\n","# centroids.shape\n","\n","\n","centroids = np.array([ net[x-1, y-1, :] for x in range(net.shape[0]) for y in range(net.shape[1]) ])\n","centroids.shape"],"execution_count":101,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(200, 3)"]},"metadata":{"tags":[]},"execution_count":101}]},{"cell_type":"code","metadata":{"id":"_cj8iDkt1UUy","colab_type":"code","outputId":"4d3aefe7-003b-4842-8b91-5a243a6a66e4","executionInfo":{"status":"ok","timestamp":1568287184505,"user_tz":-720,"elapsed":2410,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["from matplotlib import pyplot as plt\n","from matplotlib import patches as patches\n","\n","\n","fig = plt.figure()\n","\n","ax = fig.add_subplot(111, aspect='equal')\n","ax.set_xlim((0, net.shape[0]+1))\n","ax.set_ylim((0, net.shape[1]+1))\n","ax.set_title('Self-Organising Map after %d iterations' % n_iterations)\n","\n","# plot rectangles\n","for x in range(1, net.shape[0] + 1):\n","    for y in range(1, net.shape[1] + 1):\n","        print(net[x-1,y-1,:])\n","        ax.add_patch(patches.Rectangle((x-0.5, y-0.5), 1, 1,\n","                     facecolor=net[x-1,y-1,:],\n","                     edgecolor='none'))\n","plt.show()"],"execution_count":66,"outputs":[{"output_type":"stream","text":["[0.61516614 0.28666021 0.28450641]\n","[0.69724763 0.27702686 0.30438362]\n","[0.73648459 0.37953596 0.42706897]\n","[0.75186191 0.41969577 0.47778665]\n","[0.73504519 0.48773788 0.51405661]\n","[0.68087306 0.54811647 0.61244922]\n","[0.67651272 0.58056917 0.61639338]\n","[0.64718008 0.59486231 0.64150497]\n","[0.66409886 0.68327173 0.76222841]\n","[0.68249478 0.74971901 0.77985651]\n","[0.69828353 0.28012918 0.33585445]\n","[0.7627236  0.25639517 0.3256952 ]\n","[0.77891854 0.35460876 0.3730922 ]\n","[0.74259246 0.34812643 0.43490242]\n","[0.7787939  0.45975374 0.50837732]\n","[0.69881323 0.52553056 0.5747993 ]\n","[0.68812823 0.61957486 0.61648406]\n","[0.73485495 0.63571875 0.69849796]\n","[0.67505398 0.67340641 0.69502515]\n","[0.63880266 0.72520483 0.74732102]\n","[0.76900038 0.24092    0.4400194 ]\n","[0.78236045 0.24697075 0.3573585 ]\n","[0.74531573 0.34915641 0.38590864]\n","[0.73545745 0.40869636 0.42246254]\n","[0.7267648  0.43214633 0.45418351]\n","[0.73523704 0.55242896 0.54076293]\n","[0.70801107 0.61519146 0.56944583]\n","[0.72356725 0.65103727 0.64682106]\n","[0.6796604  0.73827126 0.65502351]\n","[0.7114635  0.76764058 0.65891727]\n","[0.79611293 0.22824827 0.48850496]\n","[0.75648198 0.24161402 0.41751881]\n","[0.76642775 0.30179744 0.39199753]\n","[0.74595749 0.39832698 0.44071427]\n","[0.71854724 0.48626355 0.48205969]\n","[0.73831672 0.50412975 0.50672039]\n","[0.75081094 0.62321759 0.5223463 ]\n","[0.74135201 0.65533637 0.57035494]\n","[0.67739197 0.69863685 0.58689604]\n","[0.68048177 0.71242052 0.59610668]\n","[0.73758661 0.2287448  0.45719188]\n","[0.79222816 0.33550684 0.49801358]\n","[0.71504554 0.32934038 0.42656412]\n","[0.73485688 0.41867212 0.47764527]\n","[0.69826529 0.42452828 0.41184762]\n","[0.71359192 0.5659612  0.48003891]\n","[0.70653462 0.64764524 0.44610212]\n","[0.69252259 0.72150164 0.53362425]\n","[0.75094333 0.75758554 0.5296972 ]\n","[0.67954347 0.71377409 0.46551707]\n","[0.65054724 0.31060611 0.45046448]\n","[0.75631341 0.27615697 0.4759929 ]\n","[0.69796328 0.35682355 0.47584082]\n","[0.70984984 0.39943863 0.42649442]\n","[0.66688742 0.47214104 0.41899935]\n","[0.73891647 0.54454715 0.42148268]\n","[0.71296724 0.65851207 0.41331024]\n","[0.74353417 0.73073074 0.45869118]\n","[0.7071156  0.69574073 0.38362864]\n","[0.70181171 0.70338932 0.43898835]\n","[0.6589967  0.38194951 0.48927016]\n","[0.70705483 0.41568841 0.45250284]\n","[0.64505098 0.38211972 0.51133482]\n","[0.70587287 0.41134544 0.48572284]\n","[0.67672059 0.52500147 0.46731461]\n","[0.71970792 0.61392197 0.42210274]\n","[0.67286715 0.63514692 0.40421002]\n","[0.73644931 0.69095579 0.39532291]\n","[0.73699557 0.74650184 0.33673575]\n","[0.75155225 0.780199   0.36058233]\n","[0.65023565 0.33784315 0.47066282]\n","[0.6153893  0.38365723 0.50318127]\n","[0.64933256 0.47023448 0.39827252]\n","[0.57378103 0.45562179 0.4122714 ]\n","[0.60049717 0.49724339 0.43331591]\n","[0.6614983  0.60291354 0.38853947]\n","[0.65583567 0.61812301 0.33141957]\n","[0.68638853 0.66839795 0.40235392]\n","[0.67644667 0.68972223 0.33447077]\n","[0.72231338 0.71779286 0.42564011]\n","[0.50833842 0.50644893 0.48681455]\n","[0.44447451 0.44678555 0.431581  ]\n","[0.52863244 0.53407838 0.42077997]\n","[0.56298781 0.50491147 0.44181808]\n","[0.54691112 0.5230452  0.37509744]\n","[0.62390777 0.64873172 0.38327713]\n","[0.59076761 0.61420754 0.37647754]\n","[0.58725164 0.66321605 0.38892434]\n","[0.6368687  0.66000025 0.35775599]\n","[0.69863419 0.67665556 0.33884107]\n","[0.49265959 0.52824611 0.39190125]\n","[0.3619649  0.45826368 0.41675369]\n","[0.480904   0.47218026 0.43820223]\n","[0.42308393 0.49916334 0.41065066]\n","[0.51015963 0.60772689 0.47302619]\n","[0.47906364 0.56388023 0.4470338 ]\n","[0.54800743 0.59270901 0.4766017 ]\n","[0.52522843 0.6524425  0.40374229]\n","[0.53334565 0.7160195  0.36573014]\n","[0.68280966 0.61294474 0.44034572]\n","[0.30923726 0.56771772 0.44227854]\n","[0.36273544 0.51041364 0.39173016]\n","[0.40332123 0.58688818 0.43932575]\n","[0.41026984 0.49968176 0.35491193]\n","[0.38559721 0.55325381 0.38749325]\n","[0.4637706  0.58987992 0.49289075]\n","[0.45207751 0.6462207  0.45044601]\n","[0.53366063 0.69372767 0.37609712]\n","[0.51586342 0.67675474 0.39528948]\n","[0.53601682 0.55117496 0.49654511]\n","[0.28033663 0.52443657 0.39680152]\n","[0.32693295 0.51031763 0.36547785]\n","[0.32138472 0.56568521 0.38540839]\n","[0.36825123 0.58089734 0.41310099]\n","[0.37683283 0.54703668 0.47489614]\n","[0.39243985 0.62047273 0.42871694]\n","[0.52277782 0.53248952 0.51526445]\n","[0.47661257 0.58856032 0.40814566]\n","[0.5546125  0.59941971 0.42690231]\n","[0.56653954 0.46658331 0.47803866]\n","[0.24873794 0.59803507 0.24778967]\n","[0.2775745  0.52744906 0.28380076]\n","[0.26921896 0.50992691 0.3719048 ]\n","[0.35331097 0.50873721 0.33688896]\n","[0.32446991 0.54204245 0.43180689]\n","[0.39991351 0.49159794 0.45227957]\n","[0.50332858 0.51439586 0.45242433]\n","[0.48644868 0.55113863 0.49929004]\n","[0.54357516 0.42538529 0.46165541]\n","[0.60701694 0.42415158 0.49508562]\n","[0.25229505 0.54375677 0.25619131]\n","[0.3063443  0.53695783 0.34998472]\n","[0.30280528 0.53114325 0.37361256]\n","[0.31432207 0.46397938 0.38687917]\n","[0.31067988 0.51644323 0.42929494]\n","[0.32703397 0.50714668 0.49574877]\n","[0.35588798 0.42286829 0.53034692]\n","[0.49815006 0.47976189 0.49639556]\n","[0.4630365  0.39706737 0.49405617]\n","[0.58825727 0.42604567 0.63838485]\n","[0.29528523 0.55576925 0.27929756]\n","[0.24117467 0.55334284 0.38750089]\n","[0.28699986 0.46998412 0.40837562]\n","[0.25544578 0.42865137 0.41552794]\n","[0.29511464 0.42545581 0.49226703]\n","[0.37827718 0.50037082 0.48841631]\n","[0.42909247 0.41889139 0.59040508]\n","[0.4582282  0.41390539 0.59945541]\n","[0.50786419 0.40134234 0.55182266]\n","[0.47326888 0.37271793 0.6533088 ]\n","[0.3361022  0.48380341 0.38359119]\n","[0.26083682 0.52624709 0.40033083]\n","[0.29561167 0.47216087 0.40528797]\n","[0.30387686 0.45611451 0.4982075 ]\n","[0.33502343 0.45259451 0.47355096]\n","[0.30172576 0.42189365 0.54946926]\n","[0.35682845 0.37677909 0.62871361]\n","[0.43806161 0.39125294 0.62866828]\n","[0.41937273 0.35114333 0.67501478]\n","[0.51273498 0.2791019  0.6894633 ]\n","[0.33233457 0.48927071 0.49676375]\n","[0.29718477 0.50724312 0.51231694]\n","[0.20051583 0.4811818  0.42894096]\n","[0.2666738  0.50258835 0.54643997]\n","[0.26373326 0.40235218 0.56949458]\n","[0.2961173  0.41001228 0.56454329]\n","[0.38010527 0.31469533 0.66618269]\n","[0.36484986 0.29266323 0.63886692]\n","[0.43200543 0.25467403 0.64119177]\n","[0.45800667 0.26093845 0.6300389 ]\n","[0.26826478 0.5181637  0.44517607]\n","[0.25241348 0.55364811 0.52603683]\n","[0.19772266 0.54588827 0.53816875]\n","[0.24874668 0.47591513 0.584125  ]\n","[0.24339814 0.4690462  0.55198181]\n","[0.29840584 0.36896198 0.61579427]\n","[0.36459111 0.31619486 0.63968381]\n","[0.40454749 0.29956267 0.64329106]\n","[0.40784303 0.25270556 0.67989824]\n","[0.48159202 0.20018595 0.71542121]\n","[0.20205322 0.53406785 0.52986042]\n","[0.27429587 0.6381668  0.51159754]\n","[0.20935623 0.59361977 0.62927742]\n","[0.24466677 0.51004464 0.6127761 ]\n","[0.24081122 0.42698127 0.6293362 ]\n","[0.24781046 0.3775312  0.67420335]\n","[0.28085739 0.35036994 0.69105931]\n","[0.36904831 0.27475445 0.66240621]\n","[0.41126755 0.28571816 0.69947623]\n","[0.3985432  0.1928313  0.62738766]\n","[0.34340412 0.5527125  0.5897077 ]\n","[0.2364683  0.58700264 0.57201213]\n","[0.16356316 0.63863059 0.64183349]\n","[0.21730899 0.50722719 0.66373779]\n","[0.26278094 0.4770902  0.63341734]\n","[0.20844741 0.35228031 0.67894215]\n","[0.31431637 0.36172462 0.64356517]\n","[0.34264753 0.31197694 0.64688241]\n","[0.38471912 0.28278099 0.69556075]\n","[0.43545465 0.21882829 0.6178882 ]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"866J653f1YdM","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}