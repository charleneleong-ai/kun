{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"som_tut","version":"0.3.2","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"FwLfnrzIw34C","colab_type":"text"},"source":["Self Organising Maps Tutorial http://blog.yhat.com/posts/self-organizing-maps-2.html"]},{"cell_type":"code","metadata":{"id":"n7K9ZPWbQrdF","colab_type":"code","outputId":"f7d50ade-7329-44fe-c039-6484bb612d5a","executionInfo":{"status":"ok","timestamp":1568346727596,"user_tz":-720,"elapsed":833864,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["import warnings\n","warnings.filterwarnings('ignore')\n","import sys\n","import os\n","\n","# Mount Drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","PATH = os.path.abspath(os.path.join('drive', 'My Drive', 'engr489-2019', 'kun', 'models'))\n","sys.path.append(PATH)\n","\n","# OUTPUT_DIR = PATH+'/ae_hdbscan_v1_2019.04.09-11:54:40_output'\n","# print(OUTPUT_DIR)\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dl9tESu0w8oC","colab_type":"text"},"source":["### Dataset\n","Dataset of 100 random RGB values - 100 3D vectors from 0-255."]},{"cell_type":"code","metadata":{"id":"bCPL9Gmv0tdZ","colab_type":"code","outputId":"f43ebd9f-cd4c-49a4-eff7-0ec2da3d52a9","executionInfo":{"status":"ok","timestamp":1568346729680,"user_tz":-720,"elapsed":1341,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import numpy as np\n","\n","raw_data = np.random.randint(0, 255, (2000, 3))\n","\n","raw_data.shape"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2000, 3)"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"PSC13583xEfV","colab_type":"text"},"source":["### Objective\n","Taking 3D colour vectors and mapping them to 2D surface so similar colours will end up in same area of 2D surface.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"VMXwGUn0zaPs","colab_type":"text"},"source":["### SOM Parameters\n","- SOM Size: Dimensionality (2D) and number of neurons in the grid. This is decided through trial and error. We should use fewer neurons than datapts there may be no overlap. Each of the 2D pts represents a 3D weight vector associates with the same number of dimensions as input. eg. 3D weight vector for 3 dim input\n","\n","- Learning Parameters:\n","    - Number of iterations: for small example, 2000 suffices, big examples >10 000\n","    - Radius decay: the initial 2D radius will encompass most of the SOM and will gradually decrease as the number of iterations increases.\n","    - Learning rate: decides how much we apply changes to SOM at each iter\n","    - Learning rate decay: how much the lr should decay over time"]},{"cell_type":"code","metadata":{"id":"4V51LofUWu2d","colab_type":"code","outputId":"d4c02444-aa4c-4285-b09c-4742ee82130b","executionInfo":{"status":"ok","timestamp":1568346729681,"user_tz":-720,"elapsed":645,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["network_dimensions = np.array([20, 10])\n","n_iterations = 2000\n","init_learning_rate = 0.01\n","# establish size variables based on data\n","\n","n = raw_data.shape[0]\n","m = raw_data.shape[1]\n","print(n, m)\n","\n","# weight matrix (i.e. the SOM) needs to be one m-dimensional vector for each neuron in the SOM\n","# setup random weights between 0 and 1\n","net = np.random.random((network_dimensions[0], network_dimensions[1], m))\n","print(net.shape)\n","\n","# initial neighbourhood radius\n","init_radius = max(network_dimensions[0], network_dimensions[1]) / 2\n","# radius decay parameter\n","time_constant = n_iterations / np.log(init_radius)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["2000 3\n","(20, 10, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oniIt_NqGXv9","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ijc9zesgzJjF","colab_type":"text"},"source":["### Normalisation\n","\n"]},{"cell_type":"code","metadata":{"id":"UeP2hK8NzJGK","colab_type":"code","colab":{}},"source":["# we want to keep a copy of the raw data for later\n","data = raw_data\n","\n","# normalise\n","data = raw_data / data.max()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sN7xMsAizocH","colab_type":"text"},"source":["### Learning\n","\n","For a single iteration:\n","\n","- Find the neuron in the SOM whose associated 3D vector is closest to our chosen 3D colour vector. At each step, this is called the Best Matching Unit (BMU)\n","- Move the BMU’s 3D weight vector closer to the input vector in 3D space\n","- Identify the 2D neighbours of the BMU and also move their 3D weight vectors closer to the input vector, although by a smaller amount\n","- Update the learning rate (reduce it at each iteration)"]},{"cell_type":"code","metadata":{"id":"518VKjDgz-qN","colab_type":"code","colab":{}},"source":["def find_bmu(t, net, m):\n","    \"\"\"\n","        Find the best matching unit for a given vector, t, in the SOM\n","        Returns: a (bmu, bmu_idx) tuple where bmu is the high-dimensional BMU\n","                 and bmu_idx is the index of this vector in the SOM\n","    \"\"\"\n","    bmu_idx = np.array([0, 0])\n","    # set the initial minimum distance to a huge number\n","    min_dist = np.iinfo(np.int).max\n","    # calculate the high-dimensional distance between each neuron and the input\n","    for x in range(net.shape[0]):\n","        for y in range(net.shape[1]):\n","            w = net[x, y, :].reshape(m, 1)\n","            # don't bother with actual Euclidean distance, to avoid expensive sqrt operation\n","            sq_dist = np.sum((w - t) ** 2)\n","            if sq_dist < min_dist:\n","                min_dist = sq_dist\n","                bmu_idx = np.array([x, y])\n","    # get vector corresponding to bmu_idx\n","    bmu = net[bmu_idx[0], bmu_idx[1], :].reshape(m, 1)\n","    # return the (bmu, bmu_idx) tuple\n","    return (bmu, bmu_idx)\n","\n","def decay_radius(initial_radius, i, time_constant):\n","    return initial_radius * np.exp(-i / time_constant)\n","\n","def decay_learning_rate(initial_learning_rate, i, n_iterations):\n","    return initial_learning_rate * np.exp(-i / n_iterations)\n","\n","def calculate_influence(distance, radius):\n","    return np.exp(-distance / (2* (radius**2)))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dd8fHqI804Hg","colab_type":"code","colab":{}},"source":["for i in range(n_iterations):\n","  \n","#     print('Iteration %d' % i)\n","    \n","    # select a training example at random\n","    t = data[np.random.randint(0, n), :].reshape(np.array([m, 1]))\n","    \n","    # find its Best Matching Unit\n","    bmu, bmu_idx = find_bmu(t, net, m)\n","    \n","    # decay the SOM parameters\n","    r = decay_radius(init_radius, i, time_constant)\n","    l = decay_learning_rate(init_learning_rate, i, n_iterations)\n","    \n","    # update weight vector to move closer to input\n","    # and move its neighbours in 2-D vector space closer\n","    # by a factor proportional to their 2-D distance from the BMU\n","    for x in range(net.shape[0]):\n","        for y in range(net.shape[1]):\n","            w = net[x, y, :].reshape(m, 1)\n","            # get the 2-D distance (again, not the actual Euclidean distance)\n","            w_dist = np.sum((np.array([x, y]) - bmu_idx) ** 2)\n","            \n","            # w_dist = np.sqrt(w_dist)\n","            \n","            if w_dist <= r**2:\n","                # calculate the degree of influence (based on the 2-D distance)\n","                influence = calculate_influence(w_dist, r)\n","                \n","                # new w = old w + (learning rate * influence * delta)\n","                # where delta = input vector (t) - old w\n","                new_w = w + (l * influence * (t - w))\n","                net[x, y, :] = new_w.reshape(1, 3)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KodWLEg2OT5y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"52700b22-5060-4892-81d0-c84747823de2","executionInfo":{"status":"ok","timestamp":1568346740600,"user_tz":-720,"elapsed":9435,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}}},"source":["# centroids = np.zeros(shape=(1, net.shape[2]))\n","# print(centroids.shape)\n","# for x in range(1, net.shape[0] + 1):\n","#         for y in range(1, net.shape[1] + 1):\n","#             print(net[x-1, y-1, :].shape)\n","#             centroids = np.concatenate(centroids, np.array(net[x-1, y-1, :]))\n","# centroids.shape\n","\n","\n","centroids = np.array([ net[x-1, y-1, :] for x in range(net.shape[0]) for y in range(net.shape[1]) ])\n","centroids.shape"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(200, 3)"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"_cj8iDkt1UUy","colab_type":"code","outputId":"9826e8c9-5dee-42fe-f3a8-6e57f0211f6c","executionInfo":{"status":"ok","timestamp":1568346741121,"user_tz":-720,"elapsed":8406,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["from matplotlib import pyplot as plt\n","from matplotlib import patches as patches\n","\n","\n","fig = plt.figure()\n","\n","ax = fig.add_subplot(111, aspect='equal')\n","ax.set_xlim((0, net.shape[0]+1))\n","ax.set_ylim((0, net.shape[1]+1))\n","ax.set_title('Self-Organising Map after %d iterations' % n_iterations)\n","\n","# plot rectangles\n","for x in range(1, net.shape[0] + 1):\n","    for y in range(1, net.shape[1] + 1):\n","        print(x-1,y-1, net[x-1,y-1,:])\n","        ax.add_patch(patches.Rectangle((x-0.5, y-0.5), 1, 1,\n","                     facecolor=net[x-1,y-1,:],\n","                     edgecolor='none'))\n","plt.show()"],"execution_count":9,"outputs":[{"output_type":"stream","text":["0 0 [0.62866996 0.58989157 0.7381046 ]\n","0 1 [0.61888854 0.72632081 0.73269525]\n","0 2 [0.5902887  0.67376118 0.75307286]\n","0 3 [0.47356821 0.62234707 0.70916831]\n","0 4 [0.4127994  0.69202396 0.72861141]\n","0 5 [0.32901816 0.62688441 0.66580284]\n","0 6 [0.28274715 0.62467037 0.63710394]\n","0 7 [0.23614347 0.5640279  0.65579707]\n","0 8 [0.32545053 0.64301852 0.65177295]\n","0 9 [0.2183474  0.61900023 0.66777582]\n","1 0 [0.64041717 0.64003998 0.72804676]\n","1 1 [0.63145568 0.68339964 0.76261207]\n","1 2 [0.58757938 0.6773583  0.71133971]\n","1 3 [0.48482175 0.65989271 0.75966053]\n","1 4 [0.45215378 0.62163091 0.73662584]\n","1 5 [0.35271611 0.61148579 0.73464591]\n","1 6 [0.25851035 0.58068056 0.64450264]\n","1 7 [0.29059505 0.66140893 0.70679551]\n","1 8 [0.22545495 0.68190792 0.68734888]\n","1 9 [0.2047049  0.62264039 0.6313173 ]\n","2 0 [0.51127873 0.61533814 0.76075367]\n","2 1 [0.51000126 0.64844236 0.67639159]\n","2 2 [0.51635025 0.62476933 0.75797073]\n","2 3 [0.49607014 0.60331682 0.72475844]\n","2 4 [0.41522044 0.59768315 0.69056446]\n","2 5 [0.33421909 0.64574393 0.68086855]\n","2 6 [0.25346969 0.6381883  0.72466718]\n","2 7 [0.20548221 0.60633306 0.64024796]\n","2 8 [0.19563148 0.57963517 0.62002933]\n","2 9 [0.18207675 0.66360311 0.64910231]\n","3 0 [0.45265492 0.57890302 0.71051008]\n","3 1 [0.47793119 0.56077868 0.74777687]\n","3 2 [0.53117596 0.56747533 0.71493636]\n","3 3 [0.47984753 0.55223063 0.71081768]\n","3 4 [0.35044139 0.5676397  0.66811109]\n","3 5 [0.34087961 0.57940323 0.71914623]\n","3 6 [0.3158976  0.55479264 0.64136942]\n","3 7 [0.25749307 0.56663855 0.61977863]\n","3 8 [0.27718759 0.60953534 0.65276015]\n","3 9 [0.21675192 0.58627463 0.66071738]\n","4 0 [0.48570131 0.51306034 0.65547932]\n","4 1 [0.4558962  0.52895245 0.71886078]\n","4 2 [0.43352452 0.48731656 0.70587508]\n","4 3 [0.46705403 0.51234374 0.67805695]\n","4 4 [0.36218879 0.55371075 0.70112525]\n","4 5 [0.3290012  0.53468758 0.68978916]\n","4 6 [0.32360421 0.60282341 0.63512273]\n","4 7 [0.28740506 0.61214527 0.6528293 ]\n","4 8 [0.23644955 0.57178176 0.59766716]\n","4 9 [0.2346323  0.53279781 0.5986154 ]\n","5 0 [0.44196533 0.41278018 0.58563185]\n","5 1 [0.45257223 0.37024506 0.73423566]\n","5 2 [0.3815181  0.40408323 0.65107139]\n","5 3 [0.36098378 0.40938261 0.67560062]\n","5 4 [0.33620939 0.47391554 0.64030542]\n","5 5 [0.36722671 0.48661504 0.66953855]\n","5 6 [0.27051908 0.53892646 0.66198552]\n","5 7 [0.27707528 0.57226383 0.66767869]\n","5 8 [0.24924857 0.53200029 0.67399335]\n","5 9 [0.26438772 0.61205684 0.55368443]\n","6 0 [0.4075376  0.31173422 0.62470963]\n","6 1 [0.46681886 0.37188672 0.60524682]\n","6 2 [0.36307694 0.37048917 0.69022159]\n","6 3 [0.42405505 0.39813898 0.62847801]\n","6 4 [0.38116242 0.47742501 0.59728109]\n","6 5 [0.36522698 0.44903961 0.61361661]\n","6 6 [0.34824717 0.53240984 0.62601239]\n","6 7 [0.29571835 0.53335103 0.59415372]\n","6 8 [0.33551156 0.5455903  0.56181075]\n","6 9 [0.32650952 0.51205211 0.60113688]\n","7 0 [0.42606443 0.37536728 0.63260424]\n","7 1 [0.44282947 0.32230786 0.70737701]\n","7 2 [0.43412008 0.32799733 0.6272357 ]\n","7 3 [0.36419965 0.4167785  0.61197711]\n","7 4 [0.43301693 0.48591327 0.6280814 ]\n","7 5 [0.37157583 0.4596465  0.56606639]\n","7 6 [0.37067856 0.48159168 0.64352087]\n","7 7 [0.40656782 0.49212762 0.59009358]\n","7 8 [0.42365047 0.50834194 0.55137191]\n","7 9 [0.40700097 0.53095865 0.48859481]\n","8 0 [0.42336314 0.30413621 0.59113262]\n","8 1 [0.32522264 0.26039505 0.66530047]\n","8 2 [0.39711812 0.29795656 0.66132417]\n","8 3 [0.43859594 0.4009253  0.57006972]\n","8 4 [0.46230339 0.43719983 0.51668295]\n","8 5 [0.4367798  0.48467394 0.58040888]\n","8 6 [0.47599974 0.49672202 0.5438599 ]\n","8 7 [0.43604763 0.55953053 0.51983087]\n","8 8 [0.40486261 0.57342929 0.55076131]\n","8 9 [0.40507591 0.53573769 0.42385697]\n","9 0 [0.42363294 0.25365607 0.56876264]\n","9 1 [0.33105469 0.31749127 0.57295846]\n","9 2 [0.36823921 0.39776574 0.56584147]\n","9 3 [0.43472057 0.39819102 0.60702011]\n","9 4 [0.5450922  0.4169892  0.48510978]\n","9 5 [0.55739305 0.53473467 0.5291227 ]\n","9 6 [0.54275888 0.49072333 0.53068882]\n","9 7 [0.47707032 0.6081303  0.42164696]\n","9 8 [0.49658504 0.61493341 0.40802661]\n","9 9 [0.52668636 0.54745935 0.42548825]\n","10 0 [0.49588392 0.33275394 0.52037472]\n","10 1 [0.3862497  0.36596148 0.58637416]\n","10 2 [0.47210276 0.3749722  0.50913294]\n","10 3 [0.57259014 0.49660919 0.57291761]\n","10 4 [0.57861437 0.46547591 0.43128617]\n","10 5 [0.62496715 0.56959018 0.40741881]\n","10 6 [0.62583487 0.61350669 0.45208699]\n","10 7 [0.53444196 0.62222069 0.45281906]\n","10 8 [0.48945643 0.6484468  0.40987382]\n","10 9 [0.58461439 0.58417354 0.31576984]\n","11 0 [0.56655799 0.31988104 0.56072273]\n","11 1 [0.56410446 0.4837006  0.57354516]\n","11 2 [0.59655169 0.52225704 0.47643147]\n","11 3 [0.62339777 0.53132104 0.45633244]\n","11 4 [0.62151416 0.56301401 0.475024  ]\n","11 5 [0.60037453 0.57377447 0.33950447]\n","11 6 [0.59390108 0.61551928 0.30042026]\n","11 7 [0.64988149 0.6682247  0.28819239]\n","11 8 [0.51542976 0.70545892 0.30190007]\n","11 9 [0.5786715  0.67480485 0.32291596]\n","12 0 [0.6000869  0.44041825 0.52066754]\n","12 1 [0.56999144 0.45531512 0.47135208]\n","12 2 [0.64512012 0.52929177 0.4872633 ]\n","12 3 [0.60890384 0.5460623  0.45608276]\n","12 4 [0.71117022 0.6485023  0.39447659]\n","12 5 [0.70337909 0.64012166 0.3314404 ]\n","12 6 [0.67689035 0.70372949 0.28405988]\n","12 7 [0.62024348 0.68185879 0.28067733]\n","12 8 [0.52994735 0.69255583 0.24800779]\n","12 9 [0.54771378 0.71314422 0.31324813]\n","13 0 [0.5922188  0.40466737 0.53463716]\n","13 1 [0.62598117 0.43944454 0.57284556]\n","13 2 [0.63842726 0.43481826 0.50629499]\n","13 3 [0.68683704 0.54952614 0.45026434]\n","13 4 [0.68816667 0.62961734 0.43266354]\n","13 5 [0.65436322 0.68270831 0.31001808]\n","13 6 [0.64206695 0.71820942 0.32927066]\n","13 7 [0.54497363 0.75203984 0.31060805]\n","13 8 [0.48453858 0.7500133  0.23214355]\n","13 9 [0.43445753 0.76663352 0.27402717]\n","14 0 [0.68324643 0.42239895 0.54050398]\n","14 1 [0.7459868  0.38082122 0.56169858]\n","14 2 [0.7030527  0.43229876 0.5123284 ]\n","14 3 [0.71716933 0.48119768 0.42101695]\n","14 4 [0.71089805 0.59374397 0.38470695]\n","14 5 [0.61723276 0.59083619 0.34364962]\n","14 6 [0.59864774 0.68347501 0.26791219]\n","14 7 [0.54869977 0.71159837 0.26768455]\n","14 8 [0.49057291 0.70698877 0.24736695]\n","14 9 [0.39434458 0.7395989  0.24141437]\n","15 0 [0.78538887 0.41486369 0.55532758]\n","15 1 [0.7842042  0.40969723 0.48625954]\n","15 2 [0.77775743 0.44699729 0.49775877]\n","15 3 [0.72912056 0.47965169 0.41961423]\n","15 4 [0.70233905 0.53777638 0.33652621]\n","15 5 [0.62947556 0.54738325 0.32189382]\n","15 6 [0.57639314 0.61425795 0.23517038]\n","15 7 [0.50754451 0.63473362 0.22763989]\n","15 8 [0.47957333 0.65676749 0.2024564 ]\n","15 9 [0.39243943 0.6541233  0.22965367]\n","16 0 [0.81300446 0.32333192 0.57841776]\n","16 1 [0.78015745 0.35663474 0.49173972]\n","16 2 [0.76075054 0.32920171 0.465807  ]\n","16 3 [0.7507829  0.37037669 0.3833336 ]\n","16 4 [0.65493782 0.44646434 0.33026074]\n","16 5 [0.56561212 0.50293101 0.30927011]\n","16 6 [0.53849434 0.56604318 0.25355458]\n","16 7 [0.42271567 0.5933502  0.24356937]\n","16 8 [0.42921232 0.60738355 0.24279877]\n","16 9 [0.43319862 0.64980127 0.1790079 ]\n","17 0 [0.76269558 0.24616249 0.5837053 ]\n","17 1 [0.71018786 0.29645613 0.54788896]\n","17 2 [0.73050103 0.28168785 0.47703623]\n","17 3 [0.72284897 0.32887582 0.41123463]\n","17 4 [0.62155921 0.36048631 0.35041268]\n","17 5 [0.5812431  0.47181288 0.29679617]\n","17 6 [0.46380158 0.47992271 0.23479412]\n","17 7 [0.39270099 0.49053834 0.26619625]\n","17 8 [0.33850996 0.55664716 0.21325734]\n","17 9 [0.35429827 0.56325646 0.22951713]\n","18 0 [0.77198968 0.24299192 0.56916959]\n","18 1 [0.72067149 0.28871113 0.52876627]\n","18 2 [0.71583742 0.25086008 0.48444737]\n","18 3 [0.65853159 0.28544098 0.3830038 ]\n","18 4 [0.64571714 0.36889375 0.32275633]\n","18 5 [0.57043317 0.43749326 0.31342781]\n","18 6 [0.48739757 0.44017192 0.24860552]\n","18 7 [0.40991258 0.45835033 0.24122442]\n","18 8 [0.35564827 0.42362438 0.26140049]\n","18 9 [0.38019106 0.51288101 0.26791506]\n","19 0 [0.77260541 0.19308588 0.66086285]\n","19 1 [0.71202513 0.26918329 0.61948722]\n","19 2 [0.72608148 0.2573222  0.50459509]\n","19 3 [0.66178107 0.27661916 0.4108192 ]\n","19 4 [0.61755573 0.377658   0.40131787]\n","19 5 [0.53545816 0.38496188 0.27042444]\n","19 6 [0.44961334 0.39790225 0.23118279]\n","19 7 [0.36428162 0.39534496 0.26352476]\n","19 8 [0.31652643 0.40557256 0.19107826]\n","19 9 [0.31014868 0.41825011 0.16326931]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"866J653f1YdM","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}