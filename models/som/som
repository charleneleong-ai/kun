{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"som","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"FwLfnrzIw34C","colab_type":"text"},"source":["Self Organising Maps Tutorial http://blog.yhat.com/posts/self-organizing-maps-2.html"]},{"cell_type":"code","metadata":{"id":"n7K9ZPWbQrdF","colab_type":"code","outputId":"6c487114-2633-43b5-fe4c-949a5794f9fe","executionInfo":{"status":"ok","timestamp":1569041049552,"user_tz":-720,"elapsed":18320,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["import warnings\n","warnings.filterwarnings('ignore')\n","import sys\n","import os\n","\n","# Mount Drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","PATH = os.path.abspath(os.path.join('drive', 'My Drive', 'engr489-2019', 'kun', 'models'))\n","sys.path.append(PATH)\n","\n","# OUTPUT_DIR = PATH+'/ae_hdbscan_v1_2019.04.09-11:54:40_output'\n","# print(OUTPUT_DIR)\n"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dl9tESu0w8oC","colab_type":"text"},"source":["### Dataset\n","Dataset of 100 random RGB values - 100 3D vectors from 0-255."]},{"cell_type":"code","metadata":{"id":"bCPL9Gmv0tdZ","colab_type":"code","outputId":"b64d9764-6db0-41a2-a81a-7e6103c9667e","executionInfo":{"status":"ok","timestamp":1569041049556,"user_tz":-720,"elapsed":18308,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import numpy as np\n","\n","raw_data = np.random.randint(0, 255, (2000, 3))\n","\n","raw_data.shape"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2000, 3)"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"PSC13583xEfV","colab_type":"text"},"source":["### Objective\n","Taking 3D colour vectors and mapping them to 2D surface so similar colours will end up in same area of 2D surface.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"VMXwGUn0zaPs","colab_type":"text"},"source":["### SOM Parameters\n","- SOM Size: Dimensionality (2D) and number of neurons in the grid. This is decided through trial and error. We should use fewer neurons than datapts there may be no overlap. Each of the 2D pts represents a 3D weight vector associates with the same number of dimensions as input. eg. 3D weight vector for 3 dim input\n","\n","- Learning Parameters:\n","    - Number of iterations: for small example, 2000 suffices, big examples >10 000\n","    - Radius decay: the initial 2D radius will encompass most of the SOM and will gradually decrease as the number of iterations increases.\n","    - Learning rate: decides how much we apply changes to SOM at each iter\n","    - Learning rate decay: how much the lr should decay over time"]},{"cell_type":"code","metadata":{"id":"4V51LofUWu2d","colab_type":"code","outputId":"fb59cadb-8360-46ee-dcbe-8d4234e45568","executionInfo":{"status":"ok","timestamp":1569042135438,"user_tz":-720,"elapsed":1743,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["network_dimensions = np.array([10, 20])\n","n_iterations = 2000\n","init_learning_rate = 0.01\n","# establish size variables based on data\n","\n","n = raw_data.shape[0]\n","m = raw_data.shape[1]\n","print(n, m)\n","\n","# weight matrix (i.e. the SOM) needs to be one m-dimensional vector for each neuron in the SOM\n","# setup random weights between 0 and 1\n","net = np.random.random((network_dimensions[0], network_dimensions[1], m))\n","print(net.shape)\n","\n","# initial neighbourhood radius\n","init_radius = max(network_dimensions[0], network_dimensions[1]) / 2\n","# radius decay parameter\n","time_constant = n_iterations / np.log(init_radius)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["2000 3\n","(10, 20, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oniIt_NqGXv9","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ijc9zesgzJjF","colab_type":"text"},"source":["### Normalisation\n","\n"]},{"cell_type":"code","metadata":{"id":"UeP2hK8NzJGK","colab_type":"code","colab":{}},"source":["# we want to keep a copy of the raw data for later\n","data = raw_data\n","\n","# normalise\n","data = raw_data / data.max()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sN7xMsAizocH","colab_type":"text"},"source":["### Learning\n","\n","For a single iteration:\n","\n","- Find the neuron in the SOM whose associated 3D vector is closest to our chosen 3D colour vector. At each step, this is called the Best Matching Unit (BMU)\n","- Move the BMU’s 3D weight vector closer to the input vector in 3D space\n","- Identify the 2D neighbours of the BMU and also move their 3D weight vectors closer to the input vector, although by a smaller amount\n","- Update the learning rate (reduce it at each iteration)"]},{"cell_type":"code","metadata":{"id":"518VKjDgz-qN","colab_type":"code","colab":{}},"source":["def find_bmu(t, net, m):\n","    \"\"\"\n","        Find the best matching unit for a given vector, t, in the SOM\n","        Returns: a (bmu, bmu_idx) tuple where bmu is the high-dimensional BMU\n","                 and bmu_idx is the index of this vector in the SOM\n","    \"\"\"\n","    bmu_idx = np.array([0, 0])\n","    # set the initial minimum distance to a huge number\n","    min_dist = np.iinfo(np.int).max\n","    # calculate the high-dimensional distance between each neuron and the input\n","    for x in range(net.shape[0]):\n","        for y in range(net.shape[1]):\n","            w = net[x, y, :].reshape(m, 1)\n","            # don't bother with actual Euclidean distance, to avoid expensive sqrt operation\n","            sq_dist = np.sum((w - t) ** 2)\n","            if sq_dist < min_dist:\n","                min_dist = sq_dist\n","                bmu_idx = np.array([x, y])\n","    # get vector corresponding to bmu_idx\n","    bmu = net[bmu_idx[0], bmu_idx[1], :].reshape(m, 1)\n","    # return the (bmu, bmu_idx) tuple\n","    return (bmu, bmu_idx)\n","\n","def decay_radius(initial_radius, i, time_constant):\n","    return initial_radius * np.exp(-i / time_constant)\n","\n","def decay_learning_rate(initial_learning_rate, i, n_iterations):\n","    return initial_learning_rate * np.exp(-i / n_iterations)\n","\n","def calculate_influence(distance, radius):\n","    return np.exp(-distance / (2* (radius**2)))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dd8fHqI804Hg","colab_type":"code","colab":{}},"source":["for i in range(n_iterations):\n","  \n","#     print('Iteration %d' % i)\n","    \n","    # select a training example at random\n","    t = data[np.random.randint(0, n), :].reshape(np.array([m, 1]))\n","    \n","    # find its Best Matching Unit\n","    bmu, bmu_idx = find_bmu(t, net, m)\n","    \n","    # decay the SOM parameters\n","    r = decay_radius(init_radius, i, time_constant)\n","    l = decay_learning_rate(init_learning_rate, i, n_iterations)\n","    \n","    # update weight vector to move closer to input\n","    # and move its neighbours in 2-D vector space closer\n","    # by a factor proportional to their 2-D distance from the BMU\n","    for x in range(net.shape[0]):\n","        for y in range(net.shape[1]):\n","            w = net[x, y, :].reshape(m, 1)\n","            # get the 2-D distance (again, not the actual Euclidean distance)\n","            w_dist = np.sum((np.array([x, y]) - bmu_idx) ** 2)\n","            \n","            # w_dist = np.sqrt(w_dist)\n","            \n","            if w_dist <= r**2:\n","                # calculate the degree of influence (based on the 2-D distance)\n","                influence = calculate_influence(w_dist, r)\n","                \n","                # new w = old w + (learning rate * influence * delta)\n","                # where delta = input vector (t) - old w\n","                new_w = w + (l * influence * (t - w))\n","                net[x, y, :] = new_w.reshape(1, 3)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KodWLEg2OT5y","colab_type":"code","outputId":"6e811116-15d2-48af-aee8-a8ec68714a7c","executionInfo":{"status":"ok","timestamp":1569041145399,"user_tz":-720,"elapsed":7500,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# centroids = np.zeros(shape=(1, net.shape[2]))\n","# print(centroids.shape)\n","# for x in range(1, net.shape[0] + 1):\n","#         for y in range(1, net.shape[1] + 1):\n","#             print(net[x-1, y-1, :].shape)\n","#             centroids = np.concatenate(centroids, np.array(net[x-1, y-1, :]))\n","# centroids.shape\n","\n","\n","centroids = np.array([ net[x-1, y-1, :] for x in range(net.shape[0]) for y in range(net.shape[1]) ])\n","centroids.shape"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(200, 3)"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"_cj8iDkt1UUy","colab_type":"code","outputId":"6006699f-cd4d-4741-e8f7-fe4576cc6d96","executionInfo":{"status":"ok","timestamp":1569041145900,"user_tz":-720,"elapsed":6951,"user":{"displayName":"Charlene Leong","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCCobfWuUHGz_KfndH3u42ayDsU16zUI8a0Qi_7Vg=s64","userId":"01954618043205336001"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["from matplotlib import pyplot as plt\n","from matplotlib import patches as patches\n","\n","\n","fig = plt.figure()\n","\n","ax = fig.add_subplot(111, aspect='equal')\n","ax.set_xlim((0, net.shape[0]+1))\n","ax.set_ylim((0, net.shape[1]+1))\n","ax.set_title('Self-Organising Map after %d iterations' % n_iterations)\n","\n","# plot rectangles\n","for x in range(1, net.shape[0] + 1):\n","    for y in range(1, net.shape[1] + 1):\n","        print(x-1,y-1, net[x-1,y-1,:])\n","        ax.add_patch(patches.Rectangle((x-0.5, y-0.5), 1, 1,\n","                     facecolor=net[x-1,y-1,:],\n","                     edgecolor='none'))\n","plt.show()"],"execution_count":14,"outputs":[{"output_type":"stream","text":["0 0 [0.29235001 0.410739   0.72566347]\n","0 1 [0.23299773 0.28371886 0.66685318]\n","0 2 [0.24679232 0.28431012 0.5701222 ]\n","0 3 [0.28211098 0.38974496 0.5750659 ]\n","0 4 [0.26983369 0.32727257 0.43699935]\n","0 5 [0.31351602 0.39322472 0.3883532 ]\n","0 6 [0.32452095 0.46507669 0.31740113]\n","0 7 [0.24794762 0.3742182  0.26787686]\n","0 8 [0.26616801 0.44712896 0.34251657]\n","0 9 [0.35623006 0.41797913 0.3272779 ]\n","1 0 [0.21280862 0.41840566 0.68805703]\n","1 1 [0.21307732 0.33000931 0.64478668]\n","1 2 [0.28492045 0.39170028 0.57893526]\n","1 3 [0.30059781 0.38364462 0.55362801]\n","1 4 [0.28627024 0.37070767 0.42744625]\n","1 5 [0.24573885 0.46081943 0.37482673]\n","1 6 [0.28065208 0.40683668 0.35873944]\n","1 7 [0.26860741 0.40815038 0.25926147]\n","1 8 [0.32083091 0.46389779 0.29257543]\n","1 9 [0.31446231 0.43179894 0.32183893]\n","2 0 [0.33773646 0.47198813 0.68415347]\n","2 1 [0.22368117 0.4544572  0.64182409]\n","2 2 [0.23043707 0.47695712 0.61629433]\n","2 3 [0.26541833 0.41363292 0.53244933]\n","2 4 [0.25125524 0.44204227 0.49919812]\n","2 5 [0.27821298 0.5129004  0.40884254]\n","2 6 [0.301336   0.47138863 0.33064535]\n","2 7 [0.28321782 0.50871943 0.27219634]\n","2 8 [0.21836553 0.46281251 0.28700685]\n","2 9 [0.21270518 0.46826341 0.22191862]\n","3 0 [0.29672398 0.48460598 0.59606663]\n","3 1 [0.25545138 0.47895431 0.66029519]\n","3 2 [0.24921737 0.52704298 0.57063255]\n","3 3 [0.25485839 0.46005262 0.56214625]\n","3 4 [0.24598105 0.46054051 0.4645033 ]\n","3 5 [0.26741224 0.49648306 0.38601461]\n","3 6 [0.24467329 0.53241953 0.36439285]\n","3 7 [0.29100895 0.51133469 0.27194687]\n","3 8 [0.24418396 0.52744001 0.23389776]\n","3 9 [0.30269184 0.4862846  0.3021806 ]\n","4 0 [0.3648028  0.56632032 0.70214187]\n","4 1 [0.30010968 0.59277981 0.57250569]\n","4 2 [0.22843465 0.57273863 0.55660428]\n","4 3 [0.24952193 0.58145538 0.51883751]\n","4 4 [0.26530356 0.52799839 0.48758814]\n","4 5 [0.25942976 0.50486319 0.45052271]\n","4 6 [0.32999783 0.49569338 0.34783186]\n","4 7 [0.26913956 0.43916705 0.32687195]\n","4 8 [0.30752753 0.47693378 0.29850883]\n","4 9 [0.35176472 0.46511338 0.30232369]\n","5 0 [0.36823366 0.65523973 0.66575443]\n","5 1 [0.27389514 0.64446768 0.61584996]\n","5 2 [0.26154103 0.66152417 0.58432195]\n","5 3 [0.32329931 0.56501974 0.57845781]\n","5 4 [0.26495844 0.50996791 0.53328888]\n","5 5 [0.2897744  0.51343149 0.42149465]\n","5 6 [0.34194355 0.48090859 0.40812928]\n","5 7 [0.36087072 0.42799852 0.32416922]\n","5 8 [0.36596865 0.40821561 0.32546489]\n","5 9 [0.38240818 0.40163982 0.3381295 ]\n","6 0 [0.33483623 0.71685344 0.73960595]\n","6 1 [0.30738899 0.63471875 0.67322701]\n","6 2 [0.30544161 0.68661712 0.64774923]\n","6 3 [0.3056013  0.6354602  0.59567862]\n","6 4 [0.30000801 0.55916707 0.54569405]\n","6 5 [0.37881292 0.46522816 0.50592369]\n","6 6 [0.36728186 0.4291705  0.41897444]\n","6 7 [0.37238341 0.37435875 0.34588594]\n","6 8 [0.40984946 0.30359229 0.30574126]\n","6 9 [0.46697723 0.29528965 0.34392924]\n","7 0 [0.34222241 0.71183022 0.77928229]\n","7 1 [0.32932859 0.6506062  0.76324607]\n","7 2 [0.34621726 0.63198575 0.73653182]\n","7 3 [0.37243523 0.57459539 0.68133252]\n","7 4 [0.38306834 0.55233283 0.59395942]\n","7 5 [0.43926227 0.49002971 0.55267342]\n","7 6 [0.48237406 0.38627243 0.45698512]\n","7 7 [0.4611462  0.2846358  0.41084273]\n","7 8 [0.50120219 0.3032164  0.36896399]\n","7 9 [0.50239712 0.29416022 0.3550023 ]\n","8 0 [0.37063806 0.75052729 0.79774887]\n","8 1 [0.4147196  0.68830387 0.79182854]\n","8 2 [0.42957735 0.64893979 0.77654948]\n","8 3 [0.41604552 0.61494919 0.70256918]\n","8 4 [0.47412326 0.56455432 0.64002641]\n","8 5 [0.47861223 0.44797016 0.64248193]\n","8 6 [0.50952034 0.35618622 0.56910737]\n","8 7 [0.51732946 0.30375608 0.49409715]\n","8 8 [0.50875676 0.26113747 0.46323764]\n","8 9 [0.5155366  0.28675732 0.49915332]\n","9 0 [0.38940646 0.70586006 0.79712285]\n","9 1 [0.40673972 0.7079481  0.70897438]\n","9 2 [0.51068859 0.6187643  0.72814247]\n","9 3 [0.49971933 0.59688978 0.71813019]\n","9 4 [0.58926715 0.52671811 0.71383532]\n","9 5 [0.5547215  0.41614238 0.65542035]\n","9 6 [0.57397374 0.38026955 0.60572893]\n","9 7 [0.62210907 0.32250706 0.55366563]\n","9 8 [0.57406609 0.28704332 0.55212088]\n","9 9 [0.61979753 0.22783212 0.49980115]\n","10 0 [0.49327307 0.77348385 0.75515262]\n","10 1 [0.51915191 0.69672853 0.77596802]\n","10 2 [0.51049805 0.65455065 0.72692554]\n","10 3 [0.6048019  0.58962993 0.74417566]\n","10 4 [0.61215227 0.51884836 0.69147349]\n","10 5 [0.61245573 0.41787032 0.668934  ]\n","10 6 [0.6562481  0.37304511 0.68478455]\n","10 7 [0.64495979 0.32120118 0.61177774]\n","10 8 [0.62174022 0.26388542 0.61308135]\n","10 9 [0.66732188 0.27047769 0.57479813]\n","11 0 [0.51958561 0.75633218 0.68695098]\n","11 1 [0.52618767 0.71712145 0.67605218]\n","11 2 [0.60616553 0.69885314 0.70179035]\n","11 3 [0.66303406 0.60316969 0.71473791]\n","11 4 [0.69773242 0.5247455  0.73626526]\n","11 5 [0.68727656 0.45406812 0.70496687]\n","11 6 [0.70902218 0.3325059  0.68042951]\n","11 7 [0.64904594 0.2716783  0.64628946]\n","11 8 [0.65595917 0.22154431 0.63436175]\n","11 9 [0.73025433 0.19178251 0.63430834]\n","12 0 [0.5595573  0.67149925 0.6767111 ]\n","12 1 [0.66007901 0.72645724 0.65817186]\n","12 2 [0.67415339 0.68180432 0.70525958]\n","12 3 [0.65794769 0.61767655 0.71479144]\n","12 4 [0.70709411 0.52256218 0.6932414 ]\n","12 5 [0.74373695 0.43445375 0.6849371 ]\n","12 6 [0.7352686  0.36027193 0.63777288]\n","12 7 [0.70359856 0.29221599 0.63610582]\n","12 8 [0.68965361 0.22925711 0.6034456 ]\n","12 9 [0.7531893  0.1990961  0.58585426]\n","13 0 [0.6237772  0.73446654 0.58420993]\n","13 1 [0.63517751 0.77052605 0.60546559]\n","13 2 [0.66438116 0.67514206 0.59475376]\n","13 3 [0.68769594 0.65571111 0.62755287]\n","13 4 [0.73306138 0.54958654 0.59653169]\n","13 5 [0.7286613  0.44992594 0.60412042]\n","13 6 [0.7169404  0.4062263  0.59911939]\n","13 7 [0.77660303 0.33875057 0.60790805]\n","13 8 [0.70137178 0.31933516 0.60428804]\n","13 9 [0.75125223 0.25365559 0.64737062]\n","14 0 [0.5798217  0.81357455 0.54415946]\n","14 1 [0.59586123 0.76218443 0.57063098]\n","14 2 [0.68655864 0.71470063 0.57929988]\n","14 3 [0.69804018 0.65645589 0.54746312]\n","14 4 [0.70792    0.55471918 0.57624376]\n","14 5 [0.75986899 0.50925473 0.56796328]\n","14 6 [0.71504373 0.43874688 0.57520328]\n","14 7 [0.78703798 0.34855452 0.5259384 ]\n","14 8 [0.72825217 0.28581397 0.57808867]\n","14 9 [0.77529097 0.31617653 0.61098693]\n","15 0 [0.57341001 0.70922308 0.46475372]\n","15 1 [0.60588501 0.79588124 0.41529765]\n","15 2 [0.69653803 0.69898426 0.43464523]\n","15 3 [0.63641246 0.67370159 0.50439213]\n","15 4 [0.69726823 0.61802278 0.52849333]\n","15 5 [0.75133892 0.48059097 0.53687732]\n","15 6 [0.74189466 0.42386436 0.46655005]\n","15 7 [0.78743085 0.42139965 0.52558532]\n","15 8 [0.7476575  0.32308499 0.54822663]\n","15 9 [0.70728353 0.30151514 0.56644829]\n","16 0 [0.66272536 0.82230772 0.40546827]\n","16 1 [0.64154193 0.76829616 0.44629242]\n","16 2 [0.64130311 0.7562787  0.42779956]\n","16 3 [0.67397791 0.70599536 0.44983008]\n","16 4 [0.7267941  0.65646036 0.41586737]\n","16 5 [0.70609311 0.5613354  0.48945212]\n","16 6 [0.76173864 0.45203215 0.50576316]\n","16 7 [0.73370822 0.4081059  0.50026776]\n","16 8 [0.72342891 0.39962809 0.50940795]\n","16 9 [0.76448847 0.38565983 0.44583519]\n","17 0 [0.60113543 0.843269   0.30001145]\n","17 1 [0.67557502 0.77575057 0.38287649]\n","17 2 [0.67901172 0.70660548 0.39459425]\n","17 3 [0.71194106 0.73035189 0.40864592]\n","17 4 [0.67672031 0.67916965 0.43287034]\n","17 5 [0.7186719  0.56925694 0.42962714]\n","17 6 [0.76237404 0.50323921 0.47587133]\n","17 7 [0.78328102 0.49231561 0.40421854]\n","17 8 [0.71573936 0.34529436 0.41404898]\n","17 9 [0.73570914 0.39704941 0.35518802]\n","18 0 [0.66010497 0.80253317 0.36625653]\n","18 1 [0.71181564 0.8261553  0.31382363]\n","18 2 [0.67588088 0.73993292 0.4015859 ]\n","18 3 [0.65348235 0.70971769 0.44047672]\n","18 4 [0.70295141 0.65835243 0.3565962 ]\n","18 5 [0.73597118 0.57475561 0.400471  ]\n","18 6 [0.76924832 0.56523536 0.36319943]\n","18 7 [0.68754756 0.45306993 0.47970788]\n","18 8 [0.74532653 0.39983601 0.45263937]\n","18 9 [0.62402905 0.40775578 0.39626361]\n","19 0 [0.58261868 0.68638409 0.38027739]\n","19 1 [0.65572125 0.71925934 0.42304528]\n","19 2 [0.669228   0.75426182 0.36027496]\n","19 3 [0.71466635 0.68745635 0.44062678]\n","19 4 [0.76974123 0.68577465 0.43102342]\n","19 5 [0.75026803 0.62639073 0.45948824]\n","19 6 [0.64043097 0.52466812 0.44424824]\n","19 7 [0.72813818 0.48607908 0.48725479]\n","19 8 [0.62826785 0.40284555 0.37289663]\n","19 9 [0.5691341  0.53871811 0.40706259]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nPfLGtG7fsj2r/I4p3Vnl+7ryxmSe0df8ePJ9M/Kqwo61e2WVXzupI6v8+InKKr/fzqlZ5Te3b8kq\nH+15+7+9M2887jY2ZJV/uSPvvTdpYmde+fF57521Gb8lANCWt/st4xa6mVlJOKGbmZWEE7qZWUk4\noZuZlUR2QpfUJunXkm5pRUBmZtacVrTQPwQsacF6zMwsQ1ZClzQH+FPgstaEY2ZmzcptoX8F+Diw\ns94Cks6RtEjSot7e3szNmZlZPU0ndEknAqsi4r6BlouIhRGxICIW9PTk3bxvZmb15bTQ/xh4l6Rn\ngOuAt0q6uiVRmZnZkDWd0CPiExExJyLmA6cAP4+I01sWmZmZDYnvQzczK4mWDM4VEb8AftGKdZmZ\nWXPcQjczKwkndDOzkhhT46FvXl73dvaGaM6EvO1PzxvPvGNK3pjM23ZOyiq/dt/mxwSfPL4ra9tb\nI2888WntefveprzxvF/ozBsLX5N3ZJWf3pc3nvu2nXnjsY+flDeeenff0qzy67oy3/vr845/R+em\nrPIbJ+eVbxW30M3MSsIJ3cysJJzQzcxKwgndzKwknNDNzErCCd3MrCSc0M3MSsIJ3cysJJzQzcxK\nwgndzKwknNDNzErCCd3MrCSc0M3MSsIJ3cysJJzQzcxKYkyNh97HvlnlV7+8Lat8W95w6GjD5Kzy\nM6evyiq/dXvGmNZb88aS7+vILD8pryo+3503nvmcHdOzyvd2PJ9VvmtCX1b5bZPz2mYv7cwbj7wt\nczz5zq1547HHjLzfIpjUtSar/Nplc7LKt4pb6GZmJeGEbmZWEk7oZmYl4YRuZlYSTSd0SXMl3SHp\nEUmLJX2olYGZmdnQ5Nxa0Ad8JCLul9QF3Cfp9oh4pEWxmZnZEDTdQo+IFRFxf/F4PbAE2K9VgZmZ\n2dC0pA9d0nzg9cA9NeadI2mRpEW9vb2t2JyZmdWQndAlTQG+B3w4ItZVz4+IhRGxICIW9PT05G7O\nzMzqyErokjpIyfyaiPh+a0IyM7Nm5NzlIuByYElEfLl1IZmZWTNyWuh/DLwPeKukB4q/E1oUl5mZ\nDVHTty1GxF2AWhiLmZll8DdFzcxKwgndzKwkxtR46N37T8sq3ztuU1b5ue2RVX7TuLzxzLu37p9V\nXt2bmy67eWbeeODjIq8qbezM671r37hXVvltM/Pqzvi+tqzyK1bl7X/3uLzxyPtmbc0qv+35rqzy\nU+e+nFV+dUfed1z6NuX9GMKaLXnjsbeKW+hmZiXhhG5mVhJO6GZmJeGEbmZWEk7oZmYl4YRuZlYS\nTuhmZiXhhG5mVhJO6GZmJeGEbmZWEk7oZmYl4YRuZlYSTuhmZiXhhG5mVhJO6GZmJTGmxkO/5V/f\nPtohmFkzXjfaAYyyw0c7gMQtdDOzknBCNzMrCSd0M7OScEI3MyuJrIQu6ThJ/0/SE5LOb1VQZmY2\ndE0ndEltwNeB44FDgFMlHdKqwMzMbGhyWuhHAE9ExFMRsQ24DjipNWGZmdlQ5dyHvh+wtOL5MuAN\n1QtJOgc4p3i6VdLDGdscbrOAF0c7iAGM5fjGcmzg+HI5vjy58c1rZKFh/2JRRCwEFgJIWhQRC4Z7\nm81yfM0by7GB48vl+PKMVHw5XS7LgbkVz+cU08zMbBTkJPR7gYMk7S9pPHAKcHNrwjIzs6Fqussl\nIvoknQf8BGgDroiIxYMUW9js9kaI42veWI4NHF8ux5dnROJTRIzEdszMbJj5m6JmZiXhhG5mVhLD\nktAHGxJA0gRJ1xfz75E0fzjiqLHduZLukPSIpMWSPlRjmaMlrZX0QPH3qZGIrWL7z0h6qNj2ohrz\nJemS4tj9RtKIjcQs6eCK4/KApHWSPly1zIgeP0lXSFpV+f0GSTMk3S7p8eL/9DplzyyWeVzSmSMY\n3z9JerR4/W6U1F2n7IB1YRjju0jS8orX8IQ6ZYd96I868V1fEdszkh6oU3ZYj1+9fDKq9S8iWvpH\nukD6JHAAMB54EDikapn/DVxaPD4FuL7VcdSJbV/g8OJxF/BYjdiOBm4ZiXjqxPgMMGuA+ScAPwIE\nHAncM0pxtgEvAPNG8/gBbyH9vMDDFdO+CJxfPD4f+EKNcjOAp4r/04vH00covrcD7cXjL9SKr5G6\nMIzxXQR8tIHXf8D3+XDFVzX/S8CnRuP41csno1n/hqOF3siQACcBVxWPbwCOkaRhiGUXEbEiIu4v\nHq8HlpC+8bonOQn4ViR3A92S9h2FOI4BnoyIZ0dh26+IiDuBNVWTK+vXVcC7axR9B3B7RKyJiJeA\n24HjRiK+iLgtIvqKp3eTvsMxKuocv0aMyNAfA8VX5Iz3Ate2eruNGCCfjFr9G46EXmtIgOqk+coy\nRcVeC8wchljqKrp5Xg/cU2P2GyU9KOlHkg4dybiAAG6TdJ/SsAnVGjm+I+EU6r+RRvP4AewdESuK\nxy8Ae9dYZqwcxw+QzrhqGawuDKfzii6hK+p0GYyF43cUsDIiHq8zf8SOX1U+GbX691t5UVTSFOB7\nwIcjYl3V7PtJ3QiHAV8Dbhrh8N4cEYeTRrH8a0lvGeHtD0rpi2TvAr5bY/ZoH79dRDq/HZP35kq6\nAOgDrqmzyGjVhW8Av0v6pdAVpG6NsehUBm6dj8jxGyifjHT9G46E3siQAK8sI6kdmAasHoZYdiOp\ng3Twr4mI71fPj4h1EbGheHwr0CFp1kjEVmxzefF/FXAj6dS20lgYcuF44P6IWFk9Y7SPX2FlfzdU\n8X9VjWVG9ThKOgs4ETiteNPvpoG6MCwiYmVE7IiIncC/1dnuaB+/duDPgevrLTMSx69OPhm1+jcc\nCb2RIQFuBvqv6p4M/LxepW6los/tcmBJRHy5zjL79PfnSzqCdIxG6sNmsqSu/seki2fVo1PeDJyh\n5EhgbcXp3Uip2zIazeNXobJ+nQn8oMYyPwHeLml60aXw9mLasJN0HPBx4F0RsanOMo3UheGKr/Ka\nzJ/V2e5oD/1xLPBoRCyrNXMkjt8A+WT06t8wXf09gXTF90nggmLaZ0gVGGAi6XT9CeBXwAHDEUeN\nuN5MOv35DfBA8XcCcC5wbrHMecBi0lX7u4E3jURsxbYPKLb7YBFD/7GrjE+kHxZ5EngIWDBS8RXb\nn0xK0NMqpo3a8SN9sKwAtpP6Ic8mXY/5GfA48FNgRrHsAuCyirIfKOrgE8D7RzC+J0j9p/11sP+O\nr9nArQPVhRGK79tF3foNKTntWx1f8Xy39/lIxFdMv7K/zlUsO6LHb4B8Mmr1z1/9NzMrid/Ki6Jm\nZmXkhG5mVhJO6GZmJeGEbmZWEk7oZmYl4YRuZlYSTuhmZiXx/wElTTAzIu++wwAAAABJRU5ErkJg\ngg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"866J653f1YdM","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}